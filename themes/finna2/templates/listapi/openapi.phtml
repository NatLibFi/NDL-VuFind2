<?php // This template is a JSON fragment of a complete OpenAPI specification ?>
<?php ob_start(); ?>
                    {
                        "name": "field[]",
                        "in": "query",
                        "description": "Fields to return.<?php if ($this->defaultFields): ?> If not specified, a set of default fields is returned.\n\nThe default fields are:\n- <?=implode('\n- ', array_map('addslashes', $this->defaultFields)) ?><?php endif; ?>",
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
<?php $field = ob_get_contents(); ?>
<?php ob_end_clean(); ?>
<?php ob_start(); ?>
                    {
                        "name": "prettyPrint",
                        "in": "query",
                        "description": "Whether to pretty-print the response. Useful for observing the results in a browser.",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "lng",
                        "in": "query",
                        "description": "Language for returned translated strings.",
                        "schema": {
                            "type": "string",
                            "enum": [<?=implode(', ', array_map(function ($v) { return '"' . addslashes($v) . '"'; }, array_keys($this->config->Languages->toArray()))) ?>],
                            "default": "<?=addslashes($this->config->Site->language) ?>"
                        }
                    },
                    {
                        "name": "callback",
                        "in": "query",
                        "description": "A callback that can be used for JSONP.",
                        "schema": {
                            "type": "string"
                        }
                    }
<?php $commonFields = ob_get_contents(); ?>
<?php ob_end_clean(); ?>
{
    "paths": {
        "/list": {
            "get": {
                "summary": "Fetch public lists",
                "description": "<?=str_replace(["\n", "\r"], ['\\n', '\\r'], $this->render('listapi/list-description.phtml'))?>",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "A single list ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
<?=$field ?>,
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort method.",
                        "schema": {
                            "type": "string",
                            "enum": [<?=implode(', ', array_map(function ($v) { return '"' . addslashes($v) . '"'; }, array_keys($this->sortOptions))) ?>],
                            "default": "<?=addslashes($this->defaultSort) ?>"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Record page (first page is 1).",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "default": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Records to return per page. Set to 0 to return no records.",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": <?=$maxLimit?>,
                            "default": 20
                        }
                    },
<?=$commonFields ?>
                ],
                "tags": [
                    "List"
                ],
                "responses": {
                    "200": {
                        "description": "Response containing a list.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ListResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "List id",
                        "type": "integer"
                    },
                    "title": {
                        "description": "List name",
                        "type": "string"
                    },
                    "recordCount": {
                        "description": "Number of records in the list",
                        "type": "integer"
                    },
                    "description": {
                        "description": "List description",
                        "type": "string"
                    },
                    "tags": {
                        "description": "List tags",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "records": {
                        "description": "Records",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "record": {
                                    "description": "Record",
                                    "type": "object",
                                    "properties": <?=json_encode($this->recordFields) ?>
                                },
                                "notes": {
                                    "description": "List-specific record notes",
                                    "type": "string"
                                },
                                "tags": {
                                    "description": "List-specific record tags",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "required": ["resultCount", "status"]
            }
        }
    }
}
